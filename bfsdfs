//importation des biblio
#include "Graphe.h"
#include <stdbool.h> // biblio pour les bools

/* affichage des successeurs du sommet num*/
void afficher_successeurs(pSommet * sommet, int num)
{

    printf(" sommet %d :\n",num);

    pArc arc=sommet[num]->arc;

    while(arc!=NULL)
    {
        printf("%d ",arc->sommet);
        arc=arc->arc_suivant;
    }

}

// Ajouter l'arête entre les sommets s1 et s2 du graphe
pSommet* CreerArete(pSommet* sommet,int s1,int s2)
{
    if(sommet[s1]->arc==NULL)
    {
        pArc Newarc=(pArc)malloc(sizeof(struct Arc));
        Newarc->sommet=s2;
        Newarc->arc_suivant=NULL;
        sommet[s1]->arc=Newarc;
        return sommet;
    }

    else
    {
        pArc temp=sommet[s1]->arc;
        while( !(temp->arc_suivant==NULL))
        {
            temp=temp->arc_suivant;
        }
        pArc Newarc=(pArc)malloc(sizeof(struct Arc));
        Newarc->sommet=s2;
        Newarc->arc_suivant=NULL;

        if(temp->sommet>s2)
        {
            Newarc->arc_suivant=temp->arc_suivant;
            Newarc->sommet=temp->sommet;
            temp->sommet=s2;
            temp->arc_suivant=Newarc;
            return sommet;
        }

        temp->arc_suivant=Newarc;
        return sommet;
    }
}

// créer le graphe
Graphe* CreerGraphe(int ordre)
{
    Graphe * Newgraphe=(Graphe*)malloc(sizeof(Graphe));
    Newgraphe->pSommet = (pSommet*)malloc(ordre*sizeof(pSommet));

    for(int i=0; i<ordre; i++)
    {
        Newgraphe->pSommet[i]=(pSommet)malloc(sizeof(struct Sommet));
        Newgraphe->pSommet[i]->valeur=i;
        Newgraphe->pSommet[i]->arc=NULL;
    }
    return Newgraphe;
}


/* La construction du réseau peut se faire à partir d'un fichier dont le nom est passé en paramètre
Le fichier contient : ordre, taille,orientation (0 ou 1)et liste des arcs */
Graphe * lire_graphe(char * nomFichier)
{
    Graphe* graphe;
    FILE * ifs = fopen(nomFichier,"r");
    int taille, orientation, ordre, s1, s2;

    if (!ifs)
    {
        printf("Erreur de lecture fichier\n");
        exit(-1);
    }

    fscanf(ifs,"%d",&ordre);

    graphe=CreerGraphe(ordre); // créer le graphe d'ordre sommets

    fscanf(ifs,"%d",&taille);
    fscanf(ifs,"%d",&orientation);

    graphe->orientation=orientation;
    graphe->ordre=ordre;

    // créer les arêtes du graphe
    for (int i=0; i<taille; ++i)
    {
        fscanf(ifs,"%d%d",&s1,&s2);
        graphe->pSommet=CreerArete(graphe->pSommet, s1, s2);

        if(!orientation)
            graphe->pSommet=CreerArete(graphe->pSommet, s2, s1);
    }

    return graphe;
}

/*affichage du graphe avec les successeurs de chaque sommet */
void graphe_afficher(Graphe* graphe)
{
    printf("graphe\n");

    if(graphe->orientation)
        printf("oriente\n");
    else
        printf("non oriente\n");

    printf("ordre = %d\n",graphe->ordre);

    printf("listes d'adjacence :\n");

    for (int i=0; i<graphe->ordre; i++)
    {
        afficher_successeurs(graphe->pSommet, i);
        printf("\n");
    }

}


/*fonction BFS avec une file*/
void BFS(Graphe *g, int sommet_initial) {
    bool *visite = (bool *)malloc(g->ordre * sizeof(bool));
    for (int i = 0; i < g->ordre; i++) {
        visite[i] = false;
    }
    int *queue = (int *)malloc(g->ordre * sizeof(int));
    int premier = 0, dernier = 0;
    queue[dernier++] = sommet_initial;
    visite[sommet_initial] = true;

    printf("BFS depuis le sommet %d :\n", sommet_initial);

    while (premier < dernier) {
        int current = queue[premier++];
        printf("%d ", current);

        int voisins[g->ordre];
        int compteur = 0;

        pArc arc = g->pSommet[current]->arc;
        while (arc != NULL) {
            int voisin = arc->sommet;
            if (!visite[voisin]) {
                voisins[compteur++] = voisin;
            }
            arc = arc->arc_suivant;
        }

        for (int i = 0; i < compteur - 1; i++) {
            for (int j = i + 1; j < compteur; j++) {
                if (voisins[i] > voisins[j]) {
                    int temp = voisins[i];
                    voisins[i] = voisins[j];
                    voisins[j] = temp;
                }
            }
        }
        for (int i = 0; i < compteur; i++) {
            queue[dernier++] = voisins[i];
            visite[voisins[i]] = true;
        }
    }

    free(visite);
    free(queue);
    printf("\n");
}


/*ffonction DFS en récursif*/
void DFS_Recursif(Graphe *g, int sommet, bool *visite) {
    visite[sommet] = true;
    printf("%d ", sommet);

    pArc arc = g->pSommet[sommet]->arc;
    while (arc != NULL) {
        int voisin = arc->sommet;
        if (!visite[voisin]) {
            DFS_Recursif(g, voisin, visite);
        }
        arc = arc->arc_suivant;
    }
}

void DFS(Graphe *g, int sommet_initial) {
    bool *visite = (bool *)malloc(g->ordre * sizeof(bool));
    for (int i = 0; i < g->ordre; i++) {
        visite[i] = false;
    }

    printf("DFS depuis le sommet %d :\n", sommet_initial);
    DFS_Recursif(g, sommet_initial, visite);
    printf("\n");

    free(visite);
}

void trouver_composantes_connexes(Graphe* graphe) {
    bool visite[graphe->ordre];

    for (int i = 0; i < graphe->ordre; i++) {
        visite[i] = false;
    }

    printf("Composantes connexes :\n");

    for (int i = 0; i < graphe->ordre; i++) {
        if (!visite[i]) {
            printf("Composante connexe : ");
            DFS_Recursif(graphe, i, visite);
            printf("\n");
        }
    }
}

int main()
{
    Graphe * g;

    char nom_fichier[50];
    int sommet_initial;

    printf("entrer le nom du fichier du labyrinthe:");
    gets(nom_fichier);

    g = lire_graphe(nom_fichier);

    /// afficher le graphe
    graphe_afficher(g);

    ///saisie du numéro du sommet initial pour lancer un BFS puis un DSF
    printf("numero du sommet initial : \n");
    scanf("%d", &sommet_initial);

    BFS(g, sommet_initial); //afficher le bfs du sommet choisi

    DFS(g, sommet_initial);//afficher le dfs du sommet choisi

    if (g->orientation == 0) { //vérifier si c'est un graphe orienté ou non orienté
        trouver_composantes_connexes(g); //affiche les composante connexe
    } else {
        printf("le graphe est un graphe oriente donc il n'y a pas de composante connexe.\n");
    }

    return 0;
}

/*Notre code fonctionne  pour un graphe non orienté, en revanche pour un graphe orienté, notre programme crash
* due a un problème sur un pointeur que nous n'avons pas eu le temps de régler,celui nous donne unkiquement le bfs.
 * Cependant le DFS fonctionne correctement vous pouvez le verifier sur le fichier texte "pas_oriente.txt" */

/* SOURCES :
 * Cours sur boostcamp "théorie des graphes" Cours ING1 (file ect) Cours ING2 (Graphes) :
 * http://morissardjerome.free.fr/langageC/graphe2.html
 *https://medium.com/basecs/breaking-down-breadth-first-search-cebe696709d9 */
